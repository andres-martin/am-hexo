{"meta":{"title":"C is Fun!","subtitle":null,"description":null,"author":"Andres Martin","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"C Static Libraries","slug":"post-3","date":"2019-03-24T16:28:21.000Z","updated":"2019-03-24T22:00:20.313Z","comments":true,"path":"2019/03/24/post-3/","link":"","permalink":"http://yoursite.com/2019/03/24/post-3/","excerpt":"","text":"Inbuilt functions are sometimes grouped together and placed in a file called library, that’s the definition of a C library. Why should you use libraries in C? Static libraries are useful when it comes to maximizing your productivity, and allows the user to get access to a bunch of functions that gets pre-defined output instead of writing your own code. How do libraries work? All C libraries are declared in the header of a file, a library is saved as libame.h , then this file should be included at the beginning of your C program like this #include &lt;libname.h&gt; this allows us to get access to the functions inside the library. How to create a static library in C? Before getting started you should compile all your .c files into object files, you can use the following command: gcc -c *.c The basic command to create a static library in C is ar which stands for “archiver”, In order to create a static library we can use the command like this: ar rc libname.a file1.o file2.o file3.o This program creates a static library named libname.a and includes copies of files ending in .o which are object files. If the library file already exists, it is replaced, if they are newer than those inside the library. The c flag tells ar to create the library if it doesn’t exist. The r flag tells it to replace older object files in the library, with new ones. Next, the library should be indexed using the command randlib as follows: randlib libname.h randlib is also used to re-generate the index. How to use Static Libraries? After the library is created, eventually we will want to use it, to do this we need to add the library’s name to the list of object files given to the linker. Using a special flag like -l, here is an example: cc main.o -L -lname -o prog Note the usage of the -L flag, this flag tells the linker that libraries might be found in the current directory.","categories":[],"tags":[],"author":"Andres"},{"title":"The difference between a hard link and a symbolic link .","slug":"post-2","date":"2019-03-24T16:21:48.000Z","updated":"2019-03-24T22:00:20.311Z","comments":true,"path":"2019/03/24/post-2/","link":"","permalink":"http://yoursite.com/2019/03/24/post-2/","excerpt":"","text":"A symbolic link is a term used for any file that holds a reference to another file or directory in the form of an absolute or relative path , any changes made through the symbolic will affect the original file, however if the symlink is deleted the original file still remain. Hard links may take less disk space as they only take up a directory entry, and they share the same inode as the original file,whereas a symlink needs its own inode to store the name it points to. If a Hard link is deleted it may delete the file as well, if there aren’t other hard links pointing to that file. Here is an example of how to create symlinks and hard links: First create a file: $ echo ‘Hello, World!’ &gt; myfile.txt Create a hard link hard-link to the file myfile.txt, which means “create a file that points to the same inode that myfile.txt is pointing to, use the ln command: $ ln myfile.txt hard-link Creating a soft link soft-link to the file myfile.txt, which in other words means create a file that points to the filemyfile.txt to achieve this you need to use ln -s command: $ ln -s myfile.txt my-soft-link Look what will happen now if myfile.txt is deleted or moved: hard-link still points to the same file and subsequently unaffected, whereas soft-link now points to nothing. source venngage.comI hope you have learned how Hard links and symbolic links work, and how to create them.","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://yoursite.com/tags/C/"}],"author":"Andres"},{"title":"Explaining what happens when you type ls *.c in your Shell.","slug":"post-1","date":"2019-03-24T02:34:07.000Z","updated":"2019-03-24T22:00:20.311Z","comments":true,"path":"2019/03/23/post-1/","link":"","permalink":"http://yoursite.com/2019/03/23/post-1/","excerpt":"","text":"When you are working in your terminal most of the times you will want to find certain files ending with a given extension.Let’s say you have been coding some C-type files, these files have an extension ending with .c , for example you were coding some C/C++ project and you created a file named “coderun”, then you will likely to run your code. For your computer to be able to run and interpret your code inside it, it’s imperative that you add an extension at the end of the file that tells your computer what kind of contents your file has inside it, in this case at the end of your file named “coderun” you will need to add .c “coderun.c”.Now If you are working with the shell, there is an useful command called ls, this command allows you to list all contents (including files and directories) inside your current working directory.In our case that we were working with C-type files you are most likely to list only files ending with a .c extension, to achieve this ls has some useful options that enables us to list files ending with a certain parameter, the syntax for listing only files ending with .c it’s as follows ls .c , the indicates all files, but in order to be more specific with our listing after the you will need to add a pattern that tells the terminal how to display our listing, in our example we add .c after the symbol , this indicates that all files ending with .c should be listed ls .c.As you see this let us refine our listing in our terminal!I hope this article has helped you to understand the multiple uses of ls .","categories":[],"tags":[{"name":"C","slug":"C","permalink":"http://yoursite.com/tags/C/"}],"author":"Andres"}]}